{
    "language_name": "Français",
    "language_code": "fr",
    "app_title": "EZ STT Logger GUI v.{version}",
    "tab_local": "Local",
    "tab_openai": "API OpenAI",
    "tab_elevenlabs": "API ElevenLabs",
    "tab_websocket": "WebSocket",
    "tab_integration": "Intégration (SB)",
    "label_model_whisper": "Modèle Whisper :",
    "label_api_key_openai": "Clé API OpenAI :",
    "placeholder_api_key_openai": "sk-...",
    "label_api_key_elevenlabs": "Clé API ElevenLabs :",
    "placeholder_api_key_elevenlabs": "Clé ElevenLabs...",
    "label_model_id_elevenlabs": "ID du modèle ElevenLabs :",
    "placeholder_model_id_elevenlabs": "p. ex., scribe_v1",
    "checkbox_filter_parentheses": "Filtrer le contenu entre (...) et [...]",
    "label_websocket_incoming": "Entrant (Contrôle via WebSocket) :",
    "checkbox_websocket_enable": "Activer le serveur WebSocket",
    "label_websocket_port": "Port du serveur :",
    "label_websocket_port_info": "(Défaut: {port}, Redémarrage appli requis si modifié)",
    "label_websocket_command_info": "Cmd pour enregistrement : TOGGLE_RECORD",
    "label_integration_outgoing": "Sortant (Envoyer à Streamer.bot) :",
    "checkbox_integration_enable": "Envoyer les transcriptions à Streamer.bot",
    "label_integration_url": "URL Streamer.bot :",
    "placeholder_integration_url": "ws://127.0.0.1:8080/",
    "label_integration_url_info": "(Redémarrage appli requis si modifié)",
    "label_integration_prefix": "Texte de préfixe :",
    "label_mic": "Microphone :",
    "combobox_mic_loading": "Chargement...",
    "combobox_mic_nodata": "Aucun microphone !",
    "combobox_mic_error": "Erreur !",
    "button_mic_reload": "Recharger",
    "label_language_stt": "Langue (vide=Auto) :",
    "placeholder_language_stt": "p. ex., de, en, fr (code ISO)",
    "label_format": "Format :",
    "radio_format_txt": "TXT",
    "radio_format_json": "JSON",
    "label_output_file": "Fichier de sortie :",
    "placeholder_output_file": "Par défaut : {filename}",
    "button_browse": "Parcourir...",
    "label_min_buffer": "Tampon min. (s) :",
    "label_silence_threshold": "Détection du silence (s) :",
    "checkbox_clear_log": "Effacer log au démarrage",
    "button_start_recording": "Enregistrer ",
    "button_stop_recording": "Arrêter",
    "button_stopping_recording": "Arrêt...",
    "button_edit_filter": "Modif. filtres...",
    "button_edit_replacements": "Modif. remplacements...",
    "button_clear_output": "Effacer sortie",
    "status_ready": "Prêt.",
    "status_ready_ws_disabled": "Prêt (WS désactivé).",
    "status_ready_sb_disabled": "(Envoi SB désactivé)",
    "status_mic_search": "Recherche micros...",
    "status_mic_selected": "Micro '{mic_name}' sélectionné.",
    "status_mic_invalid": "Sélection de microphone invalide.",
    "status_mics_loaded_selected": "Micros chargés. Micro sélectionné.",
    "status_mics_loaded_error": "Micros chargés, erreur sélection.",
    "status_mics_error": "Erreur chargement micros !",
    "status_mics_none": "Aucun micro trouvé !",
    "status_output_file_selected": "Fichier de sortie : {filename}",
    "status_opening_editor": "Ouverture éditeur '{filename}'...",
    "status_opened_editor": "'{filename}' ouvert pour édition.",
    "status_error_opening_file": "Erreur ouverture fichier : {error}",
    "status_error_file_not_found": "Erreur : Fichier '{filename}' absent.",
    "status_error_filter_not_found": "Erreur : Fichier filtre '{filename}' absent/création échouée.",
    "status_error_replacements_not_found": "Erreur : Fichier remplacements '{filename}' absent/création échouée.",
    "status_output_cleared": "Sortie effacée.",
    "status_error_clearing_output": "Erreur effacement sortie.",
    "status_starting_recording": "Démarrage enregistrement...",
    "status_stopping_recording": "Arrêt enregistrement...",
    "status_error_mic_select_fail": "Erreur : Sélection micro invalide !",
    "status_error_output_dir_create": "Erreur création dossier sortie : {error}",
    "status_error_output_dir_write": "Erreur : Accès écriture refusé (sortie).",
    "status_error_api_key_openai": "Erreur : Clé API OpenAI absente !",
    "status_error_api_key_elevenlabs": "Erreur : Clé API ElevenLabs absente !",
    "status_error_model_id_elevenlabs": "Erreur : ID modèle ElevenLabs absent !",
    "status_error_numeric_buffer": "Erreur : Nb invalide (tampon/silence).",
    "status_error_reading_settings": "Erreur lecture paramètres : {error}",
    "status_error_invalid_input": "Entrée invalide : {error}",
    "status_recording_finished": "Enregistrement fini.",
    "status_worker_unexpected_end": "Worker terminé inopinément.",
    "status_error_unexpected_worker": "Erreur worker inattendue !",
    "status_error_portaudio": "Erreur de flux audio !",
    "status_error_portaudio_details": "Erreur PortAudio : {error}. Arrêt.",
    "status_error_saving_config": "Erreur sauvegarde config : {error}",
    "status_error_saving_replacements": "Erreur sauvegarde remplacement '{text}'.",
    "status_error_saving_filter": "Erreur sauvegarde filtre : {error}",
    "status_error_key_unwritable": "Fichier clé non inscriptible : {error}. Clé non sécurisée !",
    "status_error_saving_key": "Erreur sauvegarde clé : {e}. Clé non sécurisée !",
    "status_filter_added": "Ajout filtre '{text}...' ({filename}).",
    "status_replacement_added": "Remplacement '{text}...' enregistré.",
    "status_replacement_exists": "Info : Remplacement '{text}...' existe.",
    "status_no_selection": "Aucune sélection effectuée.",
    "status_empty_selection": "Sélection vide.",
    "status_selection_copied": "Sélection copiée.",
    "status_all_copied": "Texte copié.",
    "status_error_copy": "Erreur copie texte.",
    "status_ws_server_starting": "Démarrage serveur WS (Port {port})...",
    "status_ws_server_running": "Serveur WS actif (Port {port})",
    "status_ws_server_stopped": "Serveur WS arrêté.",
    "status_sb_client_starting": "Démarrage client SB ({url})...",
    "status_sb_client_connected": "Connecté à SB",
    "status_sb_client_waiting": "Attente SB...",
    "status_sb_client_stopped": "Client SB arrêté.",
    "status_sb_warn_disconnected": "Connexion SB fermée.",
    "status_sb_warn_refused": "Connexion WS SB refusée.",
    "status_sb_warn_timeout": "Timeout connexion WS SB.",
    "status_sb_warn_send_error": "Erreur envoi SB : {error}",
    "status_sb_warn_queue_full": "File attente SB pleine !",
    "status_error_ws_port_invalid": "Port WS invalide : {port}",
    "status_error_sb_url_invalid": "URL SB invalide : {url}",
    "status_error_ws_lib_missing": "Lib WebSocket absente !",
    "status_error_ws_port_busy": "Port WS {port} occupé !",
    "status_error_ws_other": "Erreur port WS {port} : {error}",
    "status_error_ws_server_task": "Erreur serveur WS : {error}",
    "status_error_sb_client_task": "Erreur client WS SB : {error}",
    "status_closing": "Arrêt enregistrement avant fermeture...",
    "dialog_select_output_file": "Sélectionner fichier sortie",
    "dialog_file_type_txt": "Fichier TXT",
    "dialog_file_type_json": "Fichier JSON",
    "dialog_file_type_all": "Tous les fichiers",
    "context_copy": "Copier",
    "context_copy_all": "Tout copier",
    "context_add_filter": "Ajouter au filtre",
    "context_add_replacement": "Ajouter remplacement 'NomDuBot'",
    "context_clear_output": "Effacer sortie",
    "label_language_ui": "Langue :",
    "label_log_level": "Niveau de journalisation (Console) :",
    "log_level_debug": "Débogage",
    "log_level_info": "Info",
    "log_level_warning": "Avertissement",
    "log_level_error": "Erreur",
    "log_level_critical": "Critique",
    "status_log_level_set": "Niveau log console : {log_level}",
    "status_error_generic": "Erreur : {error}",
    "log_created_directory": "Dossier '{path}' créé/existe.",
    "log_failed_directory": "ERREUR : Création dossier '{path}' échouée : {error}",
    "log_key_missing": "ERREUR CRITIQUE : Échec chargement/génération clé chiffrement.",
    "log_logfile_cleared": "Fichier log '{path}' effacé (config).",
    "log_logfile_clear_error": "Erreur effacement log '{path}' : {error}",
    "log_logfile_clear_unexpected": "Erreur inattendue effacement log '{path}'",
    "log_logfile_not_found": "Fichier log '{path}' absent (effacement).",
    "log_logfile_no_handler": "Effacement log impossible : gestionnaire absent.",
    "log_app_started": "Démarrage WhisperGUI...",
    "log_app_ended": "Boucle UI principale terminée.",
    "log_gui_exception": "Erreur critique boucle appli.",
    "log_app_exiting": "Exécution main.py terminée.",
    "log_lang_loading": "Chargement langue : {path}",
    "log_lang_loaded": "Langue '{code}' chargée.",
    "log_lang_default_loaded": "Langue défaut '{code}' chargée.",
    "log_lang_not_supported": "Code langue '{code}' non supporté. -> '{fallback}'.",
    "log_lang_file_missing": "Fichier langue '{path}' absent.",
    "log_lang_default_missing": "Fichier langue défaut '{path}' absent ! Textes UI manquants possibles.",
    "log_lang_parse_error": "Erreur chargement/parsing langue '{path}' : {error}",
    "log_lang_key_not_string": "Clé '{key}' (langue '{code}') n'est pas string : {text}",
    "log_lang_format_missing": "Format '{e}' manquant (clé '{key}', langue {code}).",
    "log_lang_format_error": "Erreur format clé '{key}' : {error}. Orig: '{text}'",
    "log_logfile_created": "Fichier journal : {path}",
    "log_console_level_initialized": "Niveau log console init : {level}",
    "log_file_logging_disabled": "Log fichier désactivé (erreur).",
    "log_logfile_open_error": "ERREUR : Ouvrir log '{path}' échoué : {error}",
    "log_console_handler_error": "ERREUR : Création gestionnaire console échouée : {error}",
    "log_config_loading": "Chargement config '{path}'...",
    "log_config_file_not_found": "Fichier config absent : {path}",
    "log_config_openai_decrypted": "Clé API OpenAI déchiffrée.",
    "log_config_openai_decrypt_failed": "Déchiffrement clé OpenAI échoué.",
    "log_config_openai_decrypt_error": "Erreur déchiffrement clé OpenAI : {error}",
    "log_config_openai_key_found_but_no_decryption": "Clé API OpenAI trouvée, clé déchiffrement absente.",
    "log_config_elevenlabs_decrypted": "Clé API ElevenLabs déchiffrée.",
    "log_config_elevenlabs_decrypt_failed": "Déchiffrement clé ElevenLabs échoué.",
    "log_config_elevenlabs_decrypt_error": "Erreur déchiffrement clé ElevenLabs : {error}",
    "log_config_elevenlabs_key_found_but_no_decryption": "Clé API ElevenLabs trouvée, clé déchiffrement absente.",
    "log_config_loaded": "Configuration chargée.",
    "log_config_fallback_defaults": "Fichier config '{path}' absent. Défauts utilisés.",
    "log_config_parse_error": "Erreur lecture/analyse config '{path}' : {error}. Défauts utilisés.",
    "log_config_unexpected_error": "Erreur chargement config inattendue. Défauts utilisés.",
    "log_config_invalid_language": "Code langue config invalide '{value}'. -> '{fallback}'.",
    "log_config_invalid_log_level": "Niveau log config invalide '{value}'. -> '{fallback}'.",
    "log_config_saving": "Sauvegarde config '{path}'...",
    "log_config_openai_encrypted": "Clé API OpenAI chiffrée (sauvegarde).",
    "log_config_openai_encrypt_failed": "Chiffrement clé OpenAI échoué. NON sauvegardé.",
    "log_config_openai_no_key": "Clé API OpenAI présente, clé chiffrement absente. NON sauvegardé.",
    "log_config_elevenlabs_encrypted": "Clé API ElevenLabs chiffrée (sauvegarde).",
    "log_config_elevenlabs_encrypt_failed": "Chiffrement clé ElevenLabs échoué. NON sauvegardé.",
    "log_config_elevenlabs_no_key": "Clé API ElevenLabs présente, clé chiffrement absente. NON sauvegardé.",
    "log_config_invalid_log_level_save": "Tentative sauvegarde niveau log invalide '{value}'. -> '{fallback}'.",
    "log_config_save_conversion_error": "Erreur conversion num. (sauvegarde config) : {error}.",
    "log_config_saved": "Configuration sauvegardée.",
    "log_config_save_error": "ERREUR sauvegarde config '{path}' : {error}",
    "log_config_save_unexpected": "Erreur inattendue sauvegarde config",
    "log_utils_crypto_missing": "Lib crypto (cryptography) absente. Opérations clé impossibles.",
    "log_utils_crypto_missing_short": "Cryptographie manquante !",
    "log_utils_key_loaded": "Clé chiffrement chargée ({path}).",
    "log_utils_key_invalid": "Contenu '{path}' invalide (longueur/format). Nouvelle clé générée.",
    "log_utils_key_read_error": "Erreur lecture clé '{path}' : {error}",
    "log_utils_key_generating": "Génération nouvelle clé chiffrement...",
    "log_utils_key_saved": "Nouvelle clé sauvegardée ({path}).",
    "log_utils_key_important_notice": "!! IMPORTANT : Gardez '{path}' en sécurité !!\n   Nécessaire pour déchiffrer clé API.\n   NE PAS commiter sur Git/public.",
    "log_utils_key_write_error": "Échec sauvegarde clé '{path}' : {error}",
    "log_utils_key_write_error_short": "Fichier clé non inscriptible : {error}. Sécurité clé API compromise !",
    "log_utils_encrypt_failed_crypto": "Échec chiffrement : Crypto absente.",
    "log_utils_encrypt_skipped": "Chiffrement ignoré : Clé/données absentes.",
    "log_utils_encrypt_error": "Erreur chiffrement : {error}",
    "log_utils_decrypt_failed_crypto": "Échec déchiffrement : Crypto absente.",
    "log_utils_decrypt_skipped": "Déchiffrement ignoré : Clé/données absentes.",
    "log_utils_decrypt_invalid_token": "Échec déchiffrement : Jeton invalide (clé/données ?).",
    "log_utils_decrypt_error": "Erreur déchiffrement : {error}",
    "log_utils_sounddevice_missing": "Lib Sounddevice absente. Listage périphériques audio impossible.",
    "log_utils_searching_devices": "Recherche périphériques audio...",
    "log_utils_audio_query_failed": "ERREUR requête périphériques audio",
    "log_utils_audio_query_error": "Erreur accès périphériques audio : {error}",
    "log_utils_default_device_found": "Périphérique entrée défaut : Index {index} - {name}",
    "log_utils_no_default_device": "Aucun périphérique entrée défaut explicite.",
    "log_utils_default_device_error": "Impossible déterminer périphérique entrée défaut : {error}",
    "log_utils_device_count": "Nb total périphériques : {count}",
    "log_utils_skipping_mme": "Périphérique {index} ({name}) utilise MME - ignoré.",
    "log_utils_invalid_hostapi_info": "Périphérique {index} ({name}) : infos API hôte invalides.",
    "log_utils_hostapi_check_failed": "Vérif API hôte échouée (périph {index}) : {error}",
    "log_utils_valid_device": "  -> Périphérique entrée valide : {name}",
    "log_utils_skipped_device": "  -> Périphérique entrée ignoré (API hôte) : ID {index} : {name}",
    "log_utils_valid_input_count": "Nb périphériques entrée valides : {count}",
    "log_utils_no_input_devices": "Aucun micro approprié trouvé.",
    "log_ws_client_connected": "Client WS connecté : {addr}",
    "log_ws_message_received": "Msg reçu de {addr} : {msg}",
    "log_ws_command_toggle": "Cmd WS : TOGGLE_RECORD détectée -> UI.",
    "log_ws_command_unknown": "Cmd inconnue '{cmd}' reçue de {addr}.",
    "log_ws_error_unknown_command": "ERREUR : Cmd inconnue '{cmd}'.",
    "log_ws_non_text_message": "Msg non-texte reçu de {addr}. Texte seul supporté.",
    "log_ws_error_only_text": "ERREUR : Messages texte seuls supportés.",
    "log_ws_client_disconnected_ok": "Client {addr} déconnecté (normal).",
    "log_ws_client_disconnected_error": "Client {addr} déconnecté (erreur) : {error}",
    "log_ws_handler_exception": "Erreur inattendue handler WS ({addr})",
    "log_ws_connection_closed": "Connexion WS fermée : {addr}",
    "log_ws_lib_missing": "Lib WS absente. Serveur non démarré.",
    "log_ws_server_started": "Serveur WS démarré ({host}:{port})",
    "log_ws_server_stopping": "Arrêt serveur WS...",
    "log_ws_port_in_use": "Port WS {port} déjà utilisé !",
    "log_ws_port_error": "Erreur démarrage serveur WS (port {port}) : {error}",
    "log_ws_server_exception": "Erreur inattendue serveur WS.",
    "log_ws_server_closed": "Connexion serveur WS fermée.",
    "log_ws_server_task_ended": "Tâche serveur WS terminée.",
    "log_ws_invalid_port": "Port WS invalide : {port}",
    "log_ws_loop_exception": "Exception boucle events serveur WS.",
    "log_ws_loop_cleanup": "Nettoyage boucle events WS...",
    "log_ws_loop_already_shutdown": "Boucle déjà arrêtée (pas de tâches).",
    "log_ws_loop_runtime_error": "Erreur exécution (annulation tâche) : {error}",
    "log_ws_loop_cancel_error": "Erreur annulation tâches : {error}",
    "log_ws_loop_closed": "Boucle events WS fermée.",
    "log_ws_loop_already_closed": "Boucle WS déjà fermée.",
    "log_ws_thread_done": "Thread serveur WS terminé.",
    "log_ws_thread_starting": "Démarrage thread serveur WS (port {port})...",
    "log_sb_lib_missing": "Lib WS absente. Client SB non démarré.",
    "log_sb_connecting": "Tentative connexion SB : {url}",
    "log_sb_connected": "Connecté à SB WS : {url}",
    "log_sb_ping_failed": "Échec vérif connexion SB.",
    "log_sb_ping_error": "Erreur ping SB : {error}",
    "log_sb_message_sent": "Msg envoyé à SB : {msg_preview}...",
    "log_sb_send_closed": "SB WS fermé pendant envoi.",
    "log_sb_send_failed": "Msg non envoyé : {msg_preview}...",
    "log_sb_send_error": "Erreur envoi SB : {error}",
    "log_sb_invalid_url": "URL SB WS invalide : {url}",
    "log_sb_connection_closed": "Connexion SB WS fermée/reset : {error}",
    "log_sb_connection_refused": "Connexion SB WS refusée : {url}",
    "log_sb_connection_timeout": "Timeout connexion SB (>10s) : {url}",
    "log_sb_unexpected_exception": "Erreur inattendue client SB WS",
    "log_sb_connection_closed_explicit": "Connexion SB WS fermée explicitement.",
    "log_sb_connection_close_error": "Erreur fermeture connexion SB : {error}",
    "log_sb_retry_delay": "Attente {seconds}s avant retry connexion SB...",
    "log_sb_cancelled": "Attente client SB annulée.",
    "log_sb_task_ended": "Tâche client SB WS terminée.",
    "log_sb_loop_exception": "Erreur exécution boucle client SB (thread)",
    "log_sb_loop_cleanup": "Boucle client SB terminée. Nettoyage...",
    "log_sb_loop_already_shutdown": "Boucle SB déjà arrêtée.",
    "log_sb_loop_runtime_error": "Erreur exec (nettoyage asyncio thread SB) : {error}",
    "log_sb_loop_cancel_error": "Erreur nettoyage asyncio thread SB : {error}",
    "log_sb_loop_closed": "Boucle events client SB fermée.",
    "log_sb_loop_already_closed": "Boucle events client SB déjà fermée.",
    "log_sb_thread_done": "Thread client SB terminé.",
    "log_sb_thread_starting": "Démarrage thread client SB (URL : {url})...",
    "log_tp_filter_file_not_found": "Fichier filtre '{filter_path}' absent. Création défauts (si dispo)...",
    "log_tp_filter_default_created": "Fichier filtre défaut '{filter_path}' créé.",
    "log_tp_filter_empty_created": "Fichier filtre vide '{filter_path}' créé (pas défauts type).",
    "log_tp_filter_create_error": "Création fichier filtre défaut '{filter_path}' échouée : {error}",
    "log_tp_filter_invalid_regex": "Regex défaut invalide '{pattern}' : {error}",
    "log_tp_filter_loading": "Chargement modèles filtre '{filter_path}'...",
    "log_tp_filter_invalid_line": "Regex invalide '{filter_path}' L{line} : '{pattern}' - {error}. Ignoré.",
    "log_tp_filter_loaded": "{count} modèles filtre chargés ({filename}).",
    "log_tp_filter_read_error": "Lecture fichier filtre '{filter_path}' échouée : {error}. Filtres type inactifs.",
    "log_tp_filter_load_unexpected": "Erreur inattendue chargement filtre '{filter_path}'",
    "log_tp_filter_applied": "Résultat filtre : '{result}'",
    "log_tp_replacements_file_not_found": "Fichier remplacements '{replacements_path}' absent. Création exemple...",
    "log_tp_replacements_created": "Exemple fichier remplacements '{replacements_path}' créé.",
    "log_tp_replacements_create_error": "Création exemple remplacements '{replacements_path}' échouée : {error}",
    "log_tp_replacements_loading": "Chargement remplacements '{replacements_path}'...",
    "log_tp_replacements_invalid_format": "Contenu '{replacements_path}' JSON invalide (dict attendu).",
    "log_tp_replacements_loaded": "{count} règles remplacement chargées ({replacements_path}).",
    "log_tp_replacements_read_error": "Lecture/analyse remplacements '{replacements_path}' échouée : {error}. Remplacements inactifs.",
    "log_tp_replacements_load_unexpected": "Erreur inattendue chargement remplacements '{replacements_path}'",
    "log_tp_replacements_saving": "Sauvegarde remplacements '{replacements_path}'...",
    "log_tp_replacements_save_error": "Écriture fichier remplacements '{replacements_path}' échouée : {error}",
    "log_tp_replacements_save_unexpected": "Erreur inattendue sauvegarde remplacements",
    "log_tp_replacements_applied": "Remplacements appliqués. Résultat : '{result}'",
    "log_tp_replacements_rule_error": "Erreur application remplacement regex '{pattern}' -> '{replacement}' : {error}",
    "log_tp_replacements_unexpected_error": "Erreur inattendue remplacement '{pattern}' -> '{replacement}' : {error}",
    "log_tp_replacements_saved": "{count} règles remplacement sauvegardées ({replacements_path}).",
    "log_tp_replacements_merge_error": "Fichier existant '{replacements_path}' dict invalide. Sera écrasé.",
    "log_ap_audio_callback_status": "Statut rappel audio : {status}",
    "log_ap_libs_missing": "Libs Sounddevice/Soundfile absentes. Enregistrement impossible.",
    "log_ap_whisper_missing": "Erreur : Lib Whisper absente.",
    "log_ap_whisper_local_unavailable": "Mode local indisponible. Installer 'openai-whisper'.",
    "log_ap_openai_missing": "Erreur : Lib OpenAI absente.",
    "log_ap_openai_unavailable": "Mode OpenAI indisponible. Installer 'openai'.",
    "log_ap_openai_key_missing": "Erreur : Clé API OpenAI absente.",
    "log_ap_openai_key_invalid": "Clé API OpenAI absente/non chargée.",
    "log_ap_elevenlabs_missing": "Erreur : Lib ElevenLabs absente.",
    "log_ap_elevenlabs_unavailable": "Lib ElevenLabs non installée (pip install elevenlabs).",
    "log_ap_elevenlabs_key_missing": "Erreur : Clé API ElevenLabs absente.",
    "log_ap_elevenlabs_key_invalid": "Clé API ElevenLabs absente/non chargée.",
    "log_ap_loading_model": "Chargement modèle Whisper local '{model_name}'... (peut prendre du temps)",
    "log_ap_model_loaded": "Modèle local '{model_name}' chargé.",
    "log_ap_model_load_error": "Erreur chargement modèle Whisper local {model_name}",
    "log_ap_model_load_error_details": "Erreur chargement modèle : {error}\\nVérifier existence/mémoire/FFmpeg !",
    "log_ap_model_already_loaded": "Modèle local '{model_name}' déjà chargé.",
    "log_ap_using_loaded_model": "Utilisation modèle local '{model_name}' déjà chargé.",
    "log_ap_initializing_openai": "Init client API OpenAI...",
    "log_ap_openai_ready": "Client API OpenAI prêt.",
    "log_ap_openai_initialized": "Client API OpenAI initialisé.",
    "log_ap_openai_auth_error": "Erreur auth OpenAI. Clé API invalide ?",
    "log_ap_openai_key_invalid_status": "Erreur : Clé API OpenAI invalide !",
    "log_ap_openai_key_expired": "Clé API OpenAI invalide/expirée.",
    "log_ap_openai_init_error": "Erreur init client API OpenAI",
    "log_ap_openai_init_error_status": "Erreur init API OpenAI !",
    "log_ap_openai_init_error_details": "Erreur init OpenAI : {error}\\nVérifier clé/Internet.",
    "log_ap_initializing_elevenlabs": "Init client API ElevenLabs...",
    "log_ap_elevenlabs_ready": "Client API ElevenLabs prêt.",
    "log_ap_elevenlabs_initialized": "Client API ElevenLabs initialisé.",
    "log_ap_elevenlabs_api_error": "Erreur API ElevenLabs (init) : {error}",
    "log_ap_elevenlabs_api_error_status": "Erreur : Erreur API ElevenLabs ({code}) !",
    "log_ap_elevenlabs_error_details": "Erreur API ElevenLabs : {error}\\nVérifier clé/compte.",
    "log_ap_elevenlabs_init_error": "Erreur init client API ElevenLabs",
    "log_ap_elevenlabs_init_error_status": "Erreur init API ElevenLabs !",
    "log_ap_elevenlabs_init_error_details": "Erreur init ElevenLabs : {error}\\nVérifier clé/Internet.",
    "log_ap_unknown_mode": "Mode traitement inconnu : {mode}",
    "log_ap_unknown_mode_status": "Erreur : Mode inconnu '{mode}'",
    "log_ap_local_transcription_start": "Démarrage transcription locale (L: {length}s, Opt: {options})",
    "log_ap_local_transcription_result": "Résultat transcription locale : '{text}'",
    "log_ap_openai_transcription_start": "Envoi API OpenAI (M: {model}, Lg: {language}, Inv: {has_prompt}, Ln: {length}s)",
    "log_ap_openai_transcription_result": "Réponse API OpenAI : '{text}'",
    "log_ap_elevenlabs_transcription_start": "Envoi API ElevenLabs (M: {model}, L: {length}s)",
    "log_ap_elevenlabs_unexpected_response": "Structure réponse ElevenLabs STT inattendue : {response}",
    "log_ap_elevenlabs_transcription_result": "Réponse API ElevenLabs : '{text}'",
    "log_ap_openai_api_error": "Erreur API OpenAI : {error}",
    "log_ap_openai_api_error_status": "Erreur API OpenAI Seg !",
    "log_ap_openai_auth_error_during_transcription": "Erreur auth OpenAI (transcription).",
    "log_ap_openai_auth_error_status": "Erreur Auth OpenAI Seg !",
    "log_ap_elevenlabs_api_error_transcription": "Erreur API ElevenLabs : {error}",
    "log_ap_portaudio_error": "Erreur PortAudio (transcription)",
    "log_ap_audio_error_status": "Erreur Audio Seg !",
    "log_ap_runtime_error": "Erreur exec (transcription) : {error}",
    "log_ap_runtime_error_status": "Erreur exec Seg ! ({error})",
    "log_ap_transcription_error": "Erreur transcription générique (mode {mode})",
    "log_ap_transcription_error_status": "Erreur transcription {api_name} Seg !",
    "log_ap_worker_start": "Démarrage worker enregistrement. Mode: {mode}, Périph: {device}, Modèle: {model}",
    "log_ap_client_init_failed": "Échec init client STT. Arrêt worker.",
    "log_ap_using_openai_prompt": "Utilisation invite API OpenAI : '{prompt}'",
    "log_ap_open_audio_stream": "Ouverture flux audio (périph {device_id})...",
    "log_ap_audio_stream_configured": "Flux audio config : Fréq={rate}, Can={channels}, Bloc={blocksize}",
    "log_ap_audio_stream_started": "Flux audio démarré. Attente données...",
    "log_ap_recording_running": "Enregistrement en cours ({mode}) - Parlez.",
    "log_ap_speech_detected": "Parole détectée.",
    "log_ap_silence_detected": "Silence détecté ({seconds}s).",
    "log_ap_processing_segment": "Traitement segment {segment_id} ({mode})...",
    "log_ap_segment_length": "Traitement segment {segment_id} (L: {length}s)",
    "log_ap_segment_finished": "Segment {segment_id} terminé ({mode}). Attente parole.",
    "log_ap_segment_result": "Résultat segment {segment_id} (filtré) : '{text}'",
    "log_ap_processing_remainder": "Traitement reste {segment_id} (après silence, {mode})...",
    "log_ap_processing_remainder_length": "Traitement reste {segment_id} (L: {length}s)",
    "log_ap_remainder_finished": "Segment {segment_id} (reste) terminé ({mode}). Attente parole.",
    "log_ap_remainder_result": "Résultat segment {segment_id} (reste) : '{text}'",
    "log_ap_file_write_error": "Erreur écriture fichier sortie '{filename}' : {error}",
    "log_ap_file_write_error_remainder": "Erreur écriture (reste) '{filename}' : {error}",
    "log_ap_file_unexpected_error": "Erreur inattendue écriture fichier '{filename}'",
    "log_ap_file_unexpected_error_remainder": "Erreur fichier inattendue (reste) '{filename}'",
    "log_ap_sb_message_sent": "Msg envoyé file attente SB : {message}",
    "log_ap_sb_message_sent_remainder": "Msg (reste) file attente SB : {message}",
    "log_ap_sb_queue_full": "File attente SB pleine. Msg rejeté.",
    "log_ap_sb_queue_full_remainder": "File attente SB (reste) pleine.",
    "log_ap_sb_queue_error": "Erreur ajout file attente SB : {error}",
    "log_ap_sb_queue_error_remainder": "Erreur ajout file attente SB (reste) : {error}",
    "log_ap_portaudio_stream_error": "Erreur PortAudio (flux audio)",
    "log_ap_worker_unexpected_error": "Erreur inattendue thread worker enregistrement",
    "log_ap_worker_ending": "Arrêt worker enregistrement.",
    "log_ap_stream_stopped": "Flux audio arrêté/fermé.",
    "log_ap_stream_close_error": "Erreur fermeture flux audio : {error}",
    "log_ap_audio_queue_cleared": "File attente audio effacée.",
    "log_ap_worker_thread_ended": "Thread worker enregistrement terminé. Statut : {status}",
    "log_gui_tab_mapping_created": "Carte initiale Onglet->Mode créée : {mapping}",
    "log_gui_setup_window": "Config fenêtre principale...",
    "log_gui_icon_not_found": "Fichier icône '{icon_file}' absent.",
    "log_gui_icon_error": "Erreur définition icône : {error}",
    "log_gui_window_setup_complete": "Config fenêtre principale terminée.",
    "log_gui_creating_widgets": "Création widgets...",
    "log_gui_widgets_created": "Widgets créés.",
    "log_gui_initial_tab_set": "Onglet initial : {tab_name}",
    "log_gui_initial_tab_error": "Impossible définir onglet initial '{tab_name}' : {error}. Retour.",
    "log_gui_fallback_tab_error": "Échec définition onglet secours : {error}",
    "log_gui_loading_initial_data": "Chargement données initiales UI...",
    "log_gui_initial_data_loaded": "Données initiales UI chargées.",
    "log_gui_no_output_path": "Chemin sortie config absent, défaut utilisé : {default_path}",
    "log_gui_starting_background_tasks": "Démarrage tâches fond...",
    "log_gui_language_change_requested": "Changement langue demandé : {language}",
    "log_gui_language_changing": "Changement langue : {code} ({name})",
    "log_gui_language_code_not_found": "Code langue '{language}' introuvable.",
    "log_gui_language_not_found": "Langue '{language}' absente (SUPPORTED_LANGUAGES). Retour défaut.",
    "log_gui_log_level_change_requested": "Changement niveau log demandé : {level}",
    "log_gui_log_level_set": "Niveau log console : {level_str} ({level_name}).",
    "log_gui_log_level_set_error": "Erreur définition niveau log console : {error}",
    "log_gui_console_handler_missing": "Gestionnaire console absent, définition niveau log impossible.",
    "log_gui_invalid_log_level": "Chaîne niveau log invalide : {level}",
    "log_gui_log_level_str_not_found": "Chaîne niveau log '{level}' introuvable.",
    "log_gui_log_level_not_found": "Niveau log '{level}' -> '{display}' absent options. Retour.",
    "log_gui_websocket_checkbox_changed": "Case serveur WS modifiée : {state}",
    "log_gui_streamerbot_checkbox_changed": "Case client SB modifiée : {state}",
    "log_gui_updating_ui_texts": "Mise à jour textes UI...",
    "log_gui_tab_names_update_warning": "Noms onglets non modifiables après init.",
    "log_gui_ui_texts_updated": "Textes UI mis à jour.",
    "log_gui_output_file_selected": "Fichier sortie sélectionné : {filepath}",
    "log_gui_opening_file": "Tentative ouverture fichier '{filepath}' (éditeur défaut)...",
    "log_gui_file_not_found": "Fichier absent (tentative ouverture) : {filepath}",
    "log_gui_os_error_opening_file": "Erreur OS ouverture '{filepath}' : {error}",
    "log_gui_unknown_error_opening_file": "Erreur inconnue ouverture '{filepath}'",
    "log_gui_textbox_clear_error": "Erreur effacement zone texte",
    "log_gui_copy_selection_error": "Erreur copie sélection : {error}",
    "log_gui_copy_all_error": "Erreur copie tout texte : {error}",
    "log_gui_filter_added_context": "Filtre ajouté (menu) : '{text}' -> {target_file}",
    "log_gui_filter_write_error": "Erreur écriture fichier filtre '{target_file}' : {error}",
    "log_gui_filter_add_error": "Erreur ajout filtre (menu)",
    "log_gui_replacement_added_context": "Nouv remplacement (menu) : '{pattern}' -> '{replacement}'",
    "log_gui_mic_thread_error": "Erreur thread chargement micro",
    "log_gui_tkerror_check_button": "TclError dans _check_record_button_state (Arrêt ?).",
    "log_gui_check_button_error": "Erreur inattendue _check_record_button_state : {error}",
    "log_gui_toggle_recording_called": "Appel toggle_recording. Statut: {status}",
    "log_gui_recording_active": "Enregistrement actif",
    "log_gui_recording_inactive": "Non enregistrement",
    "log_gui_stopping_recording": "Arrêt enregistrement...",
    "log_gui_stop_requested": "Arrêt demandé.",
    "log_gui_starting_recording": "Démarrage enregistrement...",
    "log_gui_validating_start_conditions": "Validation conditions démarrage...",
    "log_gui_start_conditions_failed": "Conditions démarrage non remplies.",
    "log_gui_gathering_runtime_config": "Collecte config exécution...",
    "log_gui_config_gathering_failed": "Échec collecte config.",
    "log_gui_preparing_worker_args": "Préparation args worker...",
    "log_gui_worker_args_error": "Erreur args worker : {error}",
    "log_gui_clearing_stop_flag": "Effacement indicateur arrêt & MàJ UI...",
    "log_gui_starting_worker_thread": "Démarrage thread recording_worker (Mode : {mode})...",
    "log_gui_worker_thread_started": "Thread recording_worker démarré.",
    "log_gui_output_dir_created": "Dossier sortie créé (Valider) : {output_dir}",
    "log_gui_error_mic_id_not_found": "ID micro introuvable.",
    "log_gui_worker_preparation": "Préparation worker : output_file = '{output_file}'",
    "log_gui_runtime_config_error": "Erreur collecte config exécution : {error}",
    "log_gui_external_toggle_command": "Cmd bascule externe enregistrement reçue (via file UI).",
    "log_gui_calling_toggle_recording": "Appel self.toggle_recording() depuis _process_gui_queue...",
    "log_gui_toggle_recording_call_finished": "Appel self.toggle_recording() depuis _process_gui_queue terminé.",
    "log_gui_worker_finished": "Worker enregistrement signalé 'terminé'.",
    "log_gui_unknown_message_type": "Type msg inconnu file UI : {type}",
    "log_gui_queue_processing_error": "Erreur boucle traitement file UI",
    "log_gui_status_label_update_error": "MàJ étiquette état impossible (fenêtre fermée ?).",
    "log_gui_status": "Statut UI : {message}",
    "log_gui_sending_ws_stop_signal": "Envoi signal arrêt serveur WS...",
    "log_gui_ws_stop_event_set_via_loop": "Événement arrêt serveur WS défini via call_soon_threadsafe.",
    "log_gui_ws_loop_not_found": "Boucle événement arrêt WS absente/non active. Tentative définition directe.",
    "log_gui_ws_stop_event_error": "Erreur définition événement arrêt WS : {error}",
    "log_gui_sending_sb_stop_signal": "Envoi signal arrêt client SB...",
    "log_gui_tab_mode_not_found": "Mode interne onglet '{tab_name}' introuvable. Retour 'local'.",
    "log_gui_closing_initiated": "Processus fermeture lancé...",
    "log_gui_setting_stop_flag": "Définition indicateur stop_recording_flag...",
    "log_gui_waiting_for_recording_thread": "Attente fin thread enregistrement (max 2s)...",
    "log_gui_recording_thread_timeout": "Thread enregistrement non terminé (timeout 2s).",
    "log_gui_recording_thread_terminated": "Thread enregistrement terminé.",
    "log_gui_no_active_recording_thread": "Aucun thread enregistrement actif à terminer.",
    "log_gui_stopping_background_threads": "Arrêt threads fond...",
    "log_gui_saving_final_config": "Sauvegarde config finale...",
    "log_gui_final_config_saved": "Config finale sauvegardée.",
    "log_gui_final_config_save_error": "Erreur sauvegarde config finale.",
    "log_gui_final_config_gather_error": "Collecte/sauvegarde config finale impossible.",
    "log_gui_waiting_before_destroy": "Attente brève...",
    "log_gui_destroying_window": "Destruction fenêtre Tkinter.",
    "log_gui_application_terminated": "Application terminée.",
    "status_enabled": "Activé",
    "status_disabled": "Désactivé"
}
